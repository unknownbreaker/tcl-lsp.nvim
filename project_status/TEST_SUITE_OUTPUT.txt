Running Lua unit tests with plenary...
Real Neovim test environment initialized
Starting...Scheduling: tests/lua/config_spec.lua
Scheduling: tests/lua/init_spec.lua
Scheduling: tests/lua/features/completion_spec.lua
Scheduling: tests/lua/features/formatting_spec.lua
Scheduling: tests/lua/features/folding_spec.lua
Scheduling: tests/lua/features/codelens_spec.lua
Scheduling: tests/lua/features/symbols_spec.lua
Scheduling: tests/lua/features/hover_spec.lua
Scheduling: tests/lua/features/highlights_spec.lua
Scheduling: tests/lua/features/diagnostics_spec.lua
Scheduling: tests/lua/features/signature_spec.lua
Scheduling: tests/lua/server_spec.lua
Scheduling: tests/lua/utils/cache_spec.lua
Scheduling: tests/lua/utils/logger_spec.lua
Scheduling: tests/lua/utils/helpers_spec.lua
Scheduling: tests/lua/parser/init_spec.lua
Scheduling: tests/lua/parser/ast_spec.lua
Scheduling: tests/lua/parser/symbols_spec.lua
Scheduling: tests/lua/parser/command_substitution_spec.lua
Scheduling: tests/lua/parser/scope_spec.lua
Scheduling: tests/lua/actions/rename_spec.lua
Scheduling: tests/lua/actions/refactor_spec.lua
Scheduling: tests/lua/actions/init_spec.lua
Scheduling: tests/lua/actions/cleanup_spec.lua
Scheduling: tests/lua/analyzer/init_spec.lua
Scheduling: tests/lua/analyzer/definitions_spec.lua
Scheduling: tests/lua/analyzer/workspace_spec.lua
Scheduling: tests/lua/analyzer/references_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/formatting_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/folding_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/symbols_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/completion_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/highlights_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/hover_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/utils/cache_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/actions/cleanup_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/scope_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/actions/rename_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/actions/refactor_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/signature_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/config_spec.lua
Success ||      TCL LSP Configuration Default Configuration should provide sensible defaults
Success ||      TCL LSP Configuration Default Configuration should have reasonable default values
Success ||      TCL LSP Configuration Default Configuration should include all necessary root markers
Success ||      TCL LSP Configuration Default Configuration should support both TCL and RVT filetypes
Success ||      TCL LSP Configuration Configuration Setup should accept empty setup call
Success ||      TCL LSP Configuration Configuration Setup should accept nil configuration
Success ||      TCL LSP Configuration Configuration Setup should merge user configuration with defaults
Success ||      TCL LSP Configuration Configuration Setup should perform deep merge for nested tables
Success ||      TCL LSP Configuration Configuration Setup should allow multiple setup calls
Success ||      TCL LSP Configuration Configuration Validation should validate cmd field type
Success ||      TCL LSP Configuration Configuration Validation should accept valid cmd configurations
Success ||      TCL LSP Configuration Configuration Validation should validate root_markers field type
Success ||      TCL LSP Configuration Configuration Validation should validate log_level values
Success ||      TCL LSP Configuration Configuration Validation should validate numeric fields
Success ||      TCL LSP Configuration Configuration Validation should validate filetypes field
Success ||      TCL LSP Configuration Buffer-Local Configuration should support buffer-local overrides
Success ||      TCL LSP Configuration Buffer-Local Configuration should fall back to global config without buffer overrides
Success ||      TCL LSP Configuration Buffer-Local Configuration should handle current buffer when no buffer specified
Success ||      TCL LSP Configuration Buffer-Local Configuration should validate buffer-local configuration
Success ||      TCL LSP Configuration Configuration Utilities should provide configuration reset function
Success ||      TCL LSP Configuration Configuration Utilities should provide configuration update function
Success ||      TCL LSP Configuration Configuration Utilities should detect configuration changes
Success ||      TCL LSP Configuration Configuration Utilities should provide configuration validation function
Success ||      TCL LSP Configuration Configuration Export/Import should export current configuration
Success ||      TCL LSP Configuration Configuration Export/Import should import configuration
Success ||      TCL LSP Configuration Configuration Export/Import should handle configuration serialization
Success ||      TCL LSP Configuration Edge Cases should handle deeply nested configuration
Success ||      TCL LSP Configuration Edge Cases should handle circular references gracefully
Success ||      TCL LSP Configuration Edge Cases should handle very large configurations
Success ||      TCL LSP Configuration Edge Cases should handle special characters in configuration

Success:        30
Failed :        0
Errors :        0
========================================
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/utils/logger_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/diagnostics_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/analyzer/init_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/actions/init_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/analyzer/references_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/utils/helpers_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/analyzer/definitions_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/init_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/features/codelens_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/symbols_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/analyzer/workspace_spec.lua
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/command_substitution_spec.lua

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  13
  Code sample:  set x "hello"
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/0.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/0.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        461
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/0.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 1: Simple Commands (No Substitution) should parse simple set with string value

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  8
  Code sample:  set x 42
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/1.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/1.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        452
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/1.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Fail    ||      Command Substitution - Granular Tests Level 1: Simple Commands (No Substitution) should parse simple set with numeric value
            ...-lsp.nvim/tests/lua/parser/command_substitution_spec.lua:29: Expected objects to be equal.
            Passed in:
            (number) 42
            Expected:
            (string) '42'

            stack traceback:
                ...-lsp.nvim/tests/lua/parser/command_substitution_spec.lua:29: in function <...-lsp.nvim/tests/lua/parser/command_substitution_spec.lua:22>


========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  8
  Code sample:  set x $y
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/2.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/2.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        454
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/2.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 1: Simple Commands (No Substitution) should parse set with variable reference

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  14
  Code sample:  set x "[test]"
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/3.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/3.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        462
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/3.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 2: Commands with Square Brackets (As Strings) should handle brackets in quoted strings

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  14
  Code sample:  set x \[test\]
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/4.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/4.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        462
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/4.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 2: Commands with Square Brackets (As Strings) should handle escaped brackets

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  18
  Code sample:  set x [list a b c]
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/5.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/5.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        572
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/5.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 3: Actual Command Substitution should parse set with command substitution - simple

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  20
  Code sample:  set x [expr {1 + 2}]
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/6.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/6.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        560
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/6.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 3: Actual Command Substitution should parse set with expr command substitution

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  25
  Code sample:  set result [expr {1 + 1}]
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/7.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/7.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        565
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/7.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "result"...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 3: Actual Command Substitution should parse set with nested braces in substitution

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  21
  Code sample:  set x [expr [expr 1]]
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/8.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/8.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        542
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/8.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 4: Multiple Substitutions should parse command with multiple substitutions

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  38
  Code sample:  set x 10
set y [expr $x + 5]
set z 20

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/9.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/9.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        1103
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/y65XK5/9.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
   ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  errors, filepath, had_error, children, type, comments
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      Command Substitution - Granular Tests Level 5: Command Extraction with Brackets should not split commands on brackets

Success:        9
Failed :        1
Errors :        0
========================================
Tests Failed. Exit: 1
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua
Success ||      TCL AST Parser Basic AST Construction should parse empty TCL code
Success ||      TCL AST Parser Basic AST Construction should parse whitespace-only code

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  19
  Code sample:  # This is a comment
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/3.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/3.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        283
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/3.tcl",
  "comments": "{type comment text { This is a comment} range {start {line 1 column 1} e...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Basic AST Construction should parse single comment

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  43
  Code sample:  proc hello {} {
    puts "Hello, World!"
}

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/5.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/5.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        962
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/5.tcl",
  "comments": "",
  "children": [
    {
      "type": "proc",
      "name": "hello",
  ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Procedure (proc) Parsing should parse simple procedure with no arguments

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  75
  Code sample:  proc greet {name age} {
    puts "Hello, $name! Yo...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/7.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/7.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        1066
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/7.tcl",
  "comments": "",
  "children": [
    {
      "type": "proc",
      "name": "greet",
  ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Procedure (proc) Parsing should parse procedure with arguments

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  69
  Code sample:  proc calculate {x {y 10} {operation "add"}} {
    ...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/9.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/9.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        798
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/9.tcl",
  "comments": "{type comment text { procedure body} range {start {line 2 column 1} end_...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Fail    ||      TCL AST Parser Procedure (proc) Parsing should parse procedure with default argument values
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:122: Expected objects to be equal.
            Passed in:
            (number) 10
            Expected:
            (string) '10'

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:122: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:104>


========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  68
  Code sample:  proc varargs {first args} {
    puts "First: $firs...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/11.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/11.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        1126
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/11.tcl",
  "comments": "",
  "children": [
    {
      "type": "proc",
      "name": "varargs",...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Fail    ||      TCL AST Parser Procedure (proc) Parsing should parse procedure with args (variable arguments)
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:142: Expected objects to be the same.
            Passed in:
            (number) 1
            Expected:
            (boolean) true

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:142: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:129>


========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  80
  Code sample:  proc outer {} {
    proc inner {} {
        puts "...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/13.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/13.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        1894
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/13.tcl",
  "comments": "",
  "children": [
    {
      "type": "proc",
      "name": "outer",
 ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Procedure (proc) Parsing should parse nested procedures

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  17
  Code sample:  set myvar "value"
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/15.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/15.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        466
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/15.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "myvar"...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Variable Declarations should parse simple variable set

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  20
  Code sample:  set x [expr {1 + 2}]
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/17.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/17.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        561
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/17.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
  ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Variable Declarations should parse variable set with expression

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  12
  Code sample:  global myvar
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/19.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/19.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        439
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/19.tcl",
  "comments": "",
  "children": [
    {
      "type": "global",
      "vars": ["myvar"...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Variable Declarations should parse global variable declaration

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  25
  Code sample:  upvar 1 varname localname
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/21.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/21.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        493
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/21.tcl",
  "comments": "",
  "children": [
    {
      "type": "upvar",
      "level": 1,
     ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Fail    ||      TCL AST Parser Variable Declarations should parse upvar declaration
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:210: Expected objects to be equal.
            Passed in:
            (number) 1
            Expected:
            (string) '1'

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:210: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:203>


========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  39
  Code sample:  array set myarray {key1 val1 key2 val2}
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/23.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/23.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        566
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/23.tcl",
  "comments": "",
  "children": [
    {
      "type": "array",
      "operation": "set...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Variable Declarations should parse array set

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  36
  Code sample:  if {$x > 0} {
    puts "positive"
}

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/25.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/25.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        912
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/25.tcl",
  "comments": "",
  "children": [
    {
      "type": "if",
      "condition": "{$x > ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Control Flow Structures should parse if statement

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  69
  Code sample:  if {$x > 0} {
    puts "positive"
} else {
    put...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/27.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/27.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        1424
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/27.tcl",
  "comments": "",
  "children": [
    {
      "type": "if",
      "condition": "{$x > ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Control Flow Structures should parse if-else statement

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  101
  Code sample:  if {$x > 0} {
    puts "positive"
} elseif {$x < 0...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/29.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/29.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        1555
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/29.tcl",
  "comments": "",
  "children": [
    {
      "type": "if",
      "condition": "{$x > ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Fail    ||      TCL AST Parser Control Flow Structures should parse if-elseif-else chain
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:271: Expected objects to be the same.
            Passed in:
            (nil)
            Expected:
            type table

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:271: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:257>


========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  31
  Code sample:  while {$i < 10} {
    incr i
}

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/31.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/31.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        904
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/31.tcl",
  "comments": "",
  "children": [
    {
      "type": "while",
      "condition": "{$i...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Control Flow Structures should parse while loop

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  49
  Code sample:  for {set i 0} {$i < 10} {incr i} {
    puts $i
}

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/33.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/33.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        961
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/33.tcl",
  "comments": "",
  "children": [
    {
      "type": "for",
      "init": "{set i 0}"...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Control Flow Structures should parse for loop

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  38
  Code sample:  foreach item $list {
    puts $item
}

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/35.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/35.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        927
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/35.tcl",
  "comments": "",
  "children": [
    {
      "type": "foreach",
      "var_name": "it...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Control Flow Structures should parse foreach loop

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  89
  Code sample:  switch $value {
    "a" { puts "A" }
    "b" { put...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/37.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/37.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        2266
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/37.tcl",
  "comments": "",
  "children": [
    {
      "type": "switch",
      "expression": "$...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Control Flow Structures should parse switch statement

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  71
  Code sample:  namespace eval MyNamespace {
    variable x 10
   ...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/39.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/39.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        338
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/39.tcl",
  "comments": "",
  "children": ["type namespace name MyNamespace body {{\n    variabl...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Fail    ||      TCL AST Parser Namespace Handling should parse namespace declaration
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:353: Expected objects to be equal.
            Passed in:
            (nil)
            Expected:
            (string) 'namespace'

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:353: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:342>


========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  27
  Code sample:  namespace import ::Other::*
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/41.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/41.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        458
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/41.tcl",
  "comments": "",
  "children": [
    {
      "type": "namespace_import",
      "patte...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Namespace Handling should parse namespace import

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  21
  Code sample:  ::MyNamespace::myproc
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/43.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/43.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        493
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/43.tcl",
  "comments": "",
  "children": [
    {
      "type": "command",
      "name": "::MyNa...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Namespace Handling should parse namespace qualified names

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  34
  Code sample:  proc test {} {
    puts "hello"
}

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/45.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/45.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        917
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/45.tcl",
  "comments": "",
  "children": [
    {
      "type": "proc",
      "name": "test",
  ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Position Tracking should track line and column numbers

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  49
  Code sample:  set x 10
set y 20
proc add {} { expr {$x + $y} }

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/47.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/47.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        1389
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/47.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "x",
  ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Position Tracking should track positions for all nodes

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  10
  Code sample:  proc { { {
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/49.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/49.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        378
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/49.tcl",
  "errors": "{type error message {Syntax error: missing close-brace} range {start {lin...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  children, errors, comments, filepath, had_error, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Error Handling should detect syntax errors

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  21
  Code sample:  proc incomplete {x y}
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/51.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/51.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        605
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/51.tcl",
  "comments": "",
  "children": [
    {
      "type": "error",
      "message": ["Inva...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Error Handling should handle incomplete code

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  40
  Code sample:  proc test {
    # missing closing brace

  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/53.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/53.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        378
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/53.tcl",
  "errors": "{type error message {Syntax error: missing close-brace} range {start {lin...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  children, errors, comments, filepath, had_error, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Error Handling should provide helpful error messages

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  16
  Code sample:  expr {1 + 2 * 3}
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/55.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/55.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        447
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/55.tcl",
  "comments": "",
  "children": [
    {
      "type": "expr",
      "expression": "{1 ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Expression Parsing should parse expr command

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  13
  Code sample:  puts "$myvar"
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/57.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/57.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        487
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/57.tcl",
  "comments": "",
  "children": [
    {
      "type": "command",
      "name": "puts",...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Fail    ||      TCL AST Parser Expression Parsing should parse variable substitution
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:464: Expected objects to not be the same.
            Passed in:
            (nil)
            Did not expect:
            type nil

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:464: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:458>


========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  25
  Code sample:  set result [expr {1 + 1}]
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/59.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/59.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        566
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/59.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "result...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Expression Parsing should parse command substitution

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  10
  Code sample:  list a b c
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/61.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/61.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        447
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/61.tcl",
  "comments": "",
  "children": [
    {
      "type": "list",
      "elements": ["a", ...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser List Operations should parse list creation

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  22
  Code sample:  lappend mylist element
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/63.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/63.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        469
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/63.tcl",
  "comments": "",
  "children": [
    {
      "type": "lappend",
      "var_name": "my...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser List Operations should parse lappend

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  23
  Code sample:  package require Tcl 8.6
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/65.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/65.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        474
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/65.tcl",
  "comments": "",
  "children": [
    {
      "type": "package_require",
      "packag...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Fail    ||      TCL AST Parser Package Handling should parse package require
            ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:507: Expected objects to be equal.
            Passed in:
            (number) 8.5999999999999996447
            Expected:
            (string) '8.6'

            stack traceback:
                ...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:507: in function <...cuments/Repos/tcl-lsp.nvim/tests/lua/parser/ast_spec.lua:499>


========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  29
  Code sample:  package provide MyPackage 1.0
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/67.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/67.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        480
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/67.tcl",
  "comments": "",
  "children": [
    {
      "type": "package_provide",
      "packag...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Package Handling should parse package provide

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  42
  Code sample:  proc fromfile {} {
    puts "From file"
}

  Filepath:     /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/68/test.tcl

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/69.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/69.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        962
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/69.tcl",
  "comments": "",
  "children": [
    {
      "type": "proc",
      "name": "fromfile"...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser File Path Handling should parse from file
Success ||      TCL AST Parser File Path Handling should handle file read errors

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  413
  Code sample:  proc process_data {filename {options {}}} {
    gl...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/72.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/72.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        5949
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/72.tcl",
  "comments": "",
  "children": [
    {
      "type": "proc",
      "name": "process_d...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Complex Real-World Code should parse complex procedure with multiple constructs

========================================
TCL PARSER EXECUTION DEBUG
========================================
[Step 1] Input validation
  Code length:  146
  Code sample:  set VERSION "1.0"

proc init {} {
    global VERSI...
  Filepath:     <string>

[Step 2] Checking tclsh availability
  ✓ tclsh found

[Step 3] Locating TCL parser script
[DEBUG] Starting parser path resolution...
[DEBUG] Strategy 1: Using debug info
[DEBUG] Strategy 1 path:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
[DEBUG] Strategy 1 SUCCESS
[DEBUG] ✓ Found parser at: /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  Parser path:  /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl
  ✓ Parser script located

[Step 4] Verifying parser file
  ✓ Parser file readable

[Step 5] Creating temporary file
  Temp file:    /var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/74.tcl
  ✓ Temp file created and written

[Step 6] Executing TCL parser
  Command:      tclsh '/Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tcl/core/parser.tcl' '/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/74.tcl' 2>&1

[Step 7] Parser execution results
  Exit code:    0
  Output length:        2625
  Output sample:        {
  "type": "root",
  "filepath": "/var/folders/vm/46_hv41s423b4wp_7tk7slk40000gn/T/nvim.rob.yang/B0mBKT/74.tcl",
  "comments": "",
  "children": [
    {
      "type": "set",
      "var_name": "VERSIO...
  ✓ Temp file cleaned up
  ✓ Parser executed successfully

[Step 8] Parsing JSON output
  ✓ JSON parsed successfully
  Result type:  table
  Result keys:  had_error, errors, comments, filepath, children, type
========================================
DEBUG COMPLETE - Parser Success!
========================================

Success ||      TCL AST Parser Complex Real-World Code should parse multiple procedures and variables

Success:        32
Failed :        7
Errors :        0
========================================
Tests Failed. Exit: 1
Real Neovim test environment initialized

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua
Success ||      TCL LSP Server State Management should initialize with clean state
Success ||      TCL LSP Server State Management should track server state during lifecycle
Success ||      TCL LSP Server State Management should handle multiple start attempts gracefully
Success ||      TCL LSP Server Root Directory Detection should find git root directory
Success ||      TCL LSP Server Root Directory Detection should find tcl.toml project marker
Success ||      TCL LSP Server Root Directory Detection should find project.tcl marker
Success ||      TCL LSP Server Root Directory Detection should fallback to current directory when no markers found
Success ||      TCL LSP Server Server Command Generation should generate valid command with default settings
Success ||      TCL LSP Server Server Command Generation should respect custom command configuration
Pending ||      TCL LSP Server LSP Capabilities should provide modern LSP capabilities LSP capabilities not yet exposed by server
Success ||      TCL LSP Server LSP Capabilities should provide modern LSP capabilities
Success ||      TCL LSP Server Lifecycle Management should start server successfully
Success ||      TCL LSP Server Lifecycle Management should stop server gracefully
Success ||      TCL LSP Server Lifecycle Management should restart server properly
Success ||      TCL LSP Server Error Handling should handle missing TCL executable gracefully
Success ||      TCL LSP Server Error Handling should handle invalid TCL files without crashing
Success ||      TCL LSP Server Error Handling should validate function parameters
Fail    ||      TCL LSP Server Integration with Real Neovim should attach to buffer correctly
            ...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:404: TCL LSP client should attach to buffer
            Expected objects to be the same.
            Passed in:
            (boolean) false
            Expected:
            (boolean) true

            stack traceback:
                ...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:404: in function <...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:383>

Fail    ||      TCL LSP Server Integration with Real Neovim should handle multiple buffers in same project
            ...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:433: Main buffer should have LSP client
            Expected objects to be the same.
            Passed in:
            (boolean) false
            Expected:
            (boolean) true

            stack traceback:
                ...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:433: in function <...g/Documents/Repos/tcl-lsp.nvim/tests/lua/server_spec.lua:410>


Success:        16
Failed :        2
Errors :        0
========================================
Tests Failed. Exit: 1
Real Neovim test environment initialized
...vim/0.11.4/share/nvim/runtime/lua/vim/lsp/_transport.lua:68: Spawning language server with cmd: `{ "custom-tclsh", "/path/to/parser.tcl" }` failed. The language server is either not installed, missing from PATH, or not executable.

========================================
Testing:        /Users/rob.yang/Documents/Repos/tcl-lsp.nvim/tests/lua/init_spec.lua
Success ||      TCL LSP Plugin Initialization Module Loading should load without errors
Success ||      TCL LSP Plugin Initialization Module Loading should expose expected public API
Success ||      TCL LSP Plugin Initialization Module Loading should have version information
Success ||      TCL LSP Plugin Initialization Module Loading should not pollute global namespace
Success ||      TCL LSP Plugin Initialization Setup Function should accept empty setup call
Success ||      TCL LSP Plugin Initialization Setup Function should accept nil configuration
Success ||      TCL LSP Plugin Initialization Setup Function should accept empty table configuration
Success ||      TCL LSP Plugin Initialization Setup Function should merge user configuration properly
Success ||      TCL LSP Plugin Initialization Setup Function should validate configuration parameters
Pending ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should activate on TCL files No LSP clients started - may need tclsh or manual start
Success ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should activate on TCL files
Pending ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should activate on RVT template files No LSP clients started for RVT - may need manual activation
Success ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should activate on RVT template files
Success ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should not activate on non-TCL files
Success ||      TCL LSP Plugin Initialization FileType Detection and LSP Integration should register appropriate autocommands
Pending ||      TCL LSP Plugin Initialization LSP Server Integration should start LSP server when requested LSP server didn't start - may need tclsh or additional setup
Success ||      TCL LSP Plugin Initialization LSP Server Integration should start LSP server when requested
Success ||      TCL LSP Plugin Initialization LSP Server Integration should stop LSP server when requested
Success ||      TCL LSP Plugin Initialization LSP Server Integration should provide status information
Success ||      TCL LSP Plugin Initialization Error Handling and Edge Cases should handle server startup failures gracefully
Success ||      TCL LSP Plugin Initialization Error Handling and Edge Cases should handle missing dependencies
Success ||      TCL LSP Plugin Initialization Error Handling and Edge Cases should handle repeated setup calls
Success ||      TCL LSP Plugin Initialization Error Handling and Edge Cases should validate function parameters
Success ||      TCL LSP Plugin Initialization Plugin State Management should maintain consistent internal state
Success ||      TCL LSP Plugin Initialization Plugin State Management should clean up properly on plugin reload

Success:        22
Failed :        0
Errors :        0
========================================

Running Tcl unit tests...
=========================================
TCL AST Module Test Suite
=========================================

UNIT TESTS
=========================================

Running: JSON Serialization
------------------------------------------------------------
=========================================
JSON Module Test Suite
=========================================

Group 1: Basic Type Serialization
-----------------------------------------
✓ PASS: Empty dict
✓ PASS: Simple string value
✓ PASS: Integer value
✓ PASS: Float value
✓ PASS: Boolean-like values

Group 2: Special Character Escaping
-----------------------------------------
✓ PASS: Newline escape
✗ FAIL: Quote escape
  Expected: {
  "text": "say \"hello\""
}
  Got: {
  "text": {
    "say": "hello"
  }
}
✓ PASS: Backslash escape
✓ PASS: Tab escape
✓ PASS: Carriage return escape

Group 3: List Serialization
-----------------------------------------
✓ PASS: Empty list
✓ PASS: Simple list
✓ PASS: Numeric list
✓ PASS: Mixed list
✓ PASS: Single element list

Group 4: Nested Structures (BUG FIX VALIDATION)
-----------------------------------------
✓ PASS: List of dicts
✓ PASS: Nested dict
✓ PASS: Dict with list of dicts
✓ PASS: Complex AST-like structure
✓ PASS: Empty children list (common AST pattern)

Group 5: Real-World AST Structures
-----------------------------------------
✓ PASS: Simple proc AST node
✓ PASS: Set command AST node
✓ PASS: Root AST with multiple children

Group 6: Indentation Formatting
-----------------------------------------
✓ PASS: Nested indentation
✓ PASS: List indentation

Group 7: Edge Cases
-----------------------------------------
✓ PASS: Very long string
✓ PASS: Many keys
✓ PASS: Deep nesting (10 levels)

=========================================
Test Results
=========================================
Total:  28
Passed: 27
Failed: 1

✗ SOME TESTS FAILED
child process exited abnormally

Running: Utilities
------------------------------------------------------------
=========================================
Utils Module Test Suite
=========================================

Group 1: Range Creation
-----------------------------------------
✓ PASS: Simple range
✓ PASS: Single line range
✓ PASS: Column-only range
✓ PASS: Large line numbers
✓ PASS: Range structure completeness

Group 2: Line Mapping
-----------------------------------------
✓ PASS: Build line map - single line
✓ PASS: Build line map - multiple lines
✓ PASS: Build line map - empty string
✓ PASS: Build line map - very long line

Group 3: Offset to Line Conversion
-----------------------------------------
✓ PASS: Offset at start of line 1
✓ PASS: Offset in middle of line 1
✓ PASS: Offset at start of line 2
✓ PASS: Offset in middle of line 2
✓ PASS: Offset at start of line 3
✓ PASS: Offset beyond end (should default)

Group 4: Line Counting
-----------------------------------------
✓ PASS: Count lines - single line
✓ PASS: Count lines - two lines
✓ PASS: Count lines - three lines
✓ PASS: Count lines - empty string
✓ PASS: Count lines - only newline
✓ PASS: Count lines - multiple newlines

Group 5: Complex Scenarios
-----------------------------------------
✓ PASS: TCL code with proc
✓ PASS: Offset in multiline code
✓ PASS: Offset with tabs
✓ PASS: Long file simulation

Group 6: Edge Cases
-----------------------------------------
✓ PASS: Unicode characters in code
✓ PASS: Windows line endings (CRLF)
✓ PASS: Mixed line endings
✓ PASS: Range with same start and end

=========================================
Test Results
=========================================
Total:  29
Passed: 29
Failed: 0

✓ ALL TESTS PASSED

Running: Comment Extraction
------------------------------------------------------------
Comment Extraction Tests
========================

✓ PASS: No comments
✓ PASS: Single comment
✓ PASS: Multiple comments
✓ PASS: Indented comment
✓ PASS: Comment with special chars
✓ PASS: Empty file
✓ PASS: Only whitespace
✓ PASS: Comment at end
✓ PASS: Comment in middle
✓ PASS: Multiple consecutive

Results: 10/10 passed

Running: Command Extraction
------------------------------------------------------------
Command Extraction Tests
========================

✓ PASS: Single command
✓ PASS: Two commands
✓ PASS: Three commands
✓ PASS: Multiline proc
✓ PASS: Commands with comments
✓ PASS: Empty lines
✓ PASS: Command with nested braces
✓ PASS: For loop
✓ PASS: Multiple procs
✓ PASS: Empty code

Results: 10/10 passed


PARSER TESTS
=========================================

Running: Procedure Parser
------------------------------------------------------------
Procedure Parser Tests
======================

✓ PASS: Simple proc no args
✓ PASS: Proc with args
✓ PASS: Proc with defaults
✓ PASS: Proc with varargs
✓ PASS: Complex proc

Results: 5/5 passed

Running: Variable Parser
------------------------------------------------------------
Variable Parser Tests
=====================

✓ PASS: Simple set
✓ PASS: Set with string
✓ PASS: Set with variable reference
✓ PASS: Variable declaration
✓ PASS: Variable without default
✓ PASS: Global variable
✓ PASS: Multiple globals
✓ PASS: Simple upvar
✓ PASS: Upvar with level
✓ PASS: Array set
✓ PASS: Array get
✓ PASS: Array exists

Results: 12/12 passed

Running: Control Flow Parser
------------------------------------------------------------
Control Flow Parser Tests
=========================

✓ PASS: Simple if
✓ PASS: If-else
✓ PASS: If-elseif-else
✓ PASS: Simple while
✓ PASS: While with complex condition
✓ PASS: Simple for
✓ PASS: For with step
✓ PASS: Simple foreach
✓ PASS: Foreach with multiple vars
✓ PASS: Foreach multiple lists
✓ PASS: Simple switch
✓ PASS: Switch with default
✓ PASS: Switch with -exact

Results: 13/13 passed

Running: Namespace Parser
------------------------------------------------------------
Namespace Parser Tests
======================

✓ PASS: Simple namespace
✓ PASS: Namespace with body
✓ PASS: Nested namespace
✓ PASS: Simple import
✓ PASS: Import specific
✓ PASS: Simple export
✓ PASS: Export multiple
✓ PASS: Export with pattern

Results: 8/8 passed

Running: Package Parser
------------------------------------------------------------
Package Parser Tests
====================

✓ PASS: Simple require
✓ PASS: Require with version
✓ PASS: Require with exact version
✓ PASS: Simple provide
✓ PASS: Provide with version

Results: 5/5 passed

Running: Expression Parser
------------------------------------------------------------
Expression Parser Tests
=======================

✓ PASS: Simple arithmetic
✓ PASS: Expression with variables
✓ PASS: Complex expression
✓ PASS: Comparison
✓ PASS: Logical expression
✓ PASS: Function call
✓ PASS: String comparison

Results: 7/7 passed

Running: List Parser
------------------------------------------------------------
List Parser Tests
=================

✓ PASS: Simple list
✓ PASS: Empty list
✓ PASS: List with spaces
✓ PASS: Simple lappend
✓ PASS: Lappend multiple
✓ PASS: Simple puts
✓ PASS: Puts to channel
✓ PASS: Puts with -nonewline

Results: 8/8 passed


INTEGRATION TESTS
=========================================

Running: Full AST Integration
------------------------------------------------------------
=========================================
Full AST Integration Tests
=========================================

✓ PASS: Empty code produces empty AST
✓ PASS: Single set command
✓ PASS: Simple procedure
✓ PASS: Multiple commands
✓ PASS: If statement
✓ PASS: Namespace eval

=========================================
Test Results
=========================================
Total:  6
Passed: 6

✓ ALL TESTS PASSED


=========================================
TEST SUITE SUMMARY
=========================================

Test Suite                               Status
============================================================
JSON Serialization                       ✗ FAIL
Utilities                                ✓ PASS
Comment Extraction                       ✓ PASS
Command Extraction                       ✓ PASS
Procedure Parser                         ✓ PASS
Variable Parser                          ✓ PASS
Control Flow Parser                      ✓ PASS
Namespace Parser                         ✓ PASS
Package Parser                           ✓ PASS
Expression Parser                        ✓ PASS
List Parser                              ✓ PASS
Full AST Integration                     ✓ PASS
============================================================

Total Suites:  12
Passed:        11
Failed:        1

✗ SOME TEST SUITES FAILED

Please review failures above.
